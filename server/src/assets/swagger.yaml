openapi: 3.0.0
servers:
  - description: LOCAL
    url: http://localhost:8080
  - description: DEV
    url: https://api.dcs-dashboard-focke.com
info:
  description: Api specification of EverReal Code challenge
  version: "1.0.0"
  title: EverReal Code Challenge Api
  contact:
    email: vichugunov@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: User
    description: All operations regarding user-defined information
  - name: Settings
    description: All operations regarding game settings
  - name: Game
    description: All operations regarding gameplay

paths:
  /login:
    post:
      tags:
        - User
      summary: login as a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: 'everreal'
                password:
                  type: string
                  example: '2021'
      responses:
        '200':
          description: OK
          content:
            text/plain; charset=utf-8:
              schema:
                type: string
                description: JWT token in plain text response
                example: a.b.c
  /settings:
    get:
      tags:
        - Settings
      summary: get game settings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameSettings'
  /games:
    get:
      tags:
        - Game
      summary: get all games stats
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GameStat'
    post:
      tags:
        - Game
      summary: generate a new game
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: optional game name
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
  /games/{gameId}/move:
    post:
      tags:
        - Game
      parameters:
        - in: path
          name: gameId
          required: true
          schema:
            $ref: '#/components/schemas/GameId'
      summary: make a user move
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - color
              properties:
                color:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameMove'
        '400':
          $ref:  "#/components/responses/BadRequest"
  /games/{gameId}/history:
    get:
      tags:
        - Game
      parameters:
        - in: path
          name: gameId
          required: true
          schema:
            $ref: '#/components/schemas/GameId'
      summary: get user moves history
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GameMove'
        '400':
          $ref:  "#/components/responses/BadRequest"
  /games/{gameId}/ai-solution-steps:
    get:
      tags:
        - Game
      parameters:
        - in: path
          name: gameId
          required: true
          schema:
            $ref: '#/components/schemas/GameId'
      summary: get an automated solution
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - executionTimeHuman
                  - moves
                properties:
                  executionTimeHuman:
                    type: string
                    description: execution time in human format
                  moves:
                    type: array
                    items:
                      $ref: '#/components/schemas/GameMove'
        '400':
          $ref:  "#/components/responses/BadRequest"
components:
  schemas:
    GameSettings:
      type: object
      required:
        - boardSize
        - colors
      properties:
        boardSize:
          type: number
          description: board size (n x n)
          example: 10
        colors:
          type: array
          items:
            type: string
            example: red
    GameBoard:
      type: array
      items:
        type: array
        items:
          type: string
          description: color in a game cell
          example: red
    GameMove:
      type: object
      description: the result of a user move, which represents a full board after the move
      required:
        - result
        - isGameComplete
        - connectedBeforeApply
      properties:
        result:
          $ref: '#/components/schemas/GameBoard'
        isGameComplete:
          type: boolean
        connectedBeforeApply:
          $ref: '#/components/schemas/ConnectedVertices'
    Game:
      type: object
      required:
        - gameId
        - board
        - moves
        - connectedVertices
        - createdAtMs
      properties:
        gameId:
          type: string
          description: uuid of the game
        name:
          type: string
          description: user-friendly game name. optional
        board:
          $ref: '#/components/schemas/GameBoard'
        moves:
          $ref: '#/components/schemas/GameMove'
        connectedVertices:
          $ref: '#/components/schemas/ConnectedVertices'
        createdAtMs:
          $ref: '#/components/schemas/TimestampMs'
    GameId:
      type: string
      description: unique game identifier
      example: 46bbf605-36aa-4d63-bb7e-92c2ea3e6673
    Vertex:
      type: array
      description: tuple of [i,j] of a vertex coordinate (0,0 - top left)
      items:
        type: number
        example: 0
    ConnectedVertices:
      type: array
      description: these vertices are connected to each other in terms of color (starting point - top left corner)
      items:
        $ref: '#/components/schemas/Vertex'
    TimestampMs:
      type: number
      description: timestamp in ms since 1970
      example: 1615332125853
    GameStat:
      type: object
      required:
        - gameId
        - currentBoard
        - connectedVertices
        - lastChangeAtMs
      properties:
        gameId:
          type: string
          description: uuid of the game
        name:
          type: string
          description: user-friendly game name. optional
        currentBoard:
          $ref: '#/components/schemas/GameBoard'
        connectedVertices:
          $ref: '#/components/schemas/ConnectedVertices'
        lastChangeAtMs:
          $ref: '#/components/schemas/TimestampMs'
  responses:
    BadRequest:
      description: Bad request
      content:
        text/plain; charset=utf-8:
          schema:
            type: string
            description: Error description
            example: a.b.c
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
